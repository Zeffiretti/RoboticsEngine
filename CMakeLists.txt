cmake_minimum_required(VERSION 3.5)

project(RoboticsEngine LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
if (UNIX)
  set(Eigen3_Dir ${CMAKE_SOURCE_DIR}/lib/Eigen3/cmake)
  set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${Eigen3_Dir})
endif ()

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check http://doc.qt.io/qt-5/deployment-android.html for more information.
# They need to be set before the find_package(Qt5 ...) call.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
#    if (ANDROID_ABI STREQUAL "armeabi-v7a")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()

find_package(Qt5 COMPONENTS Widgets REQUIRED)
include_directories(${CMAKE_SOURCE_DIR}/lib/Eigen3)
#find_package(Eigen3 REQUIRED)

if (ANDROID)
  add_library(RoboticsEngine SHARED
    main.cpp
    mainwindow.cpp
    mainwindow.h
    mainwindow.ui
    )
else ()
  add_executable(RoboticsEngine
    main.cpp
    mainwindow.cpp
    mainwindow.h
    mainwindow.ui
    "dualpendulum/dualpendulum.cpp")
endif ()

target_link_libraries(RoboticsEngine PRIVATE Qt5::Widgets)
